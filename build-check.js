#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–¥–∞...');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const filesToCheck = [
  './services/emailService.ts',
  './config/email.ts',
  './utils/emailCheck.ts',
  './utils/envUtils.ts'
];

let hasErrors = false;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
filesToCheck.forEach(filePath => {
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const problematicPatterns = [
      /import\.meta\?\./g,
      /import\?\./g,
      /process\.env\?\./g,
      /typeof import !== 'undefined'/g
    ];
    
    problematicPatterns.forEach(pattern => {
      const matches = content.match(pattern);
      if (matches) {
        console.error(`‚ùå –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ ${filePath}:`);
        matches.forEach(match => {
          console.error(`   ${match}`);
        });
        hasErrors = true;
      }
    });
    
    console.log(`‚úÖ ${filePath} - –ø—Ä–æ–≤–µ—Ä–µ–Ω`);
  } else {
    console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
  }
});

if (hasErrors) {
  console.error('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–±–æ—Ä–∫–∏!');
  console.error('–ó–∞–º–µ–Ω–∏—Ç–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É (?.) –Ω–∞ —è–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.');
  process.exit(1);
} else {
  console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–±–æ—Ä–∫–µ!');
}