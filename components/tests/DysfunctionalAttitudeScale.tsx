import { useState } from 'react';
import { Button } from '../ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Progress } from '../ui/progress';
import { ArrowLeft, Brain, AlertCircle } from 'lucide-react';

interface DysfunctionalAttitudeScaleProps {
  onComplete: (result: DASResult) => void;
  onBack: () => void;
}

export interface DASResult {
  testId: 'das';
  responses: number[];
  totalScore: number;
  severity: 'normal' | 'mild' | 'moderate' | 'severe';
  perfectionalismScore: number;
  approvalScore: number;
  autonomyScore: number;
  completedAt: Date;
  recommendations: string[];
}

const attitudes = [
  {
    id: 1,
    text: "–ö—Ä–∏—Ç–∏–∫–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –Ω–µ–Ω–∞–≤–∏–¥–µ—Ç—å —Å–µ–±—è",
    subscale: 'approval'
  },
  {
    id: 2,
    text: "–õ—É—á—à–µ –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è, —á–µ–º —Ä–∏—Å–∫–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è",
    subscale: 'perfectionism'
  },
  {
    id: 3,
    text: "–ï—Å–ª–∏ —è –Ω–µ –¥–æ–±—å—é—Å—å —É—Å–ø–µ—Ö–∞ –≤–æ –≤—Å–µ–º, —á—Ç–æ –¥–µ–ª–∞—é, –ª—é–¥–∏ –Ω–µ –±—É–¥—É—Ç –º–µ–Ω—è —É–≤–∞–∂–∞—Ç—å",
    subscale: 'perfectionism'
  },
  {
    id: 4,
    text: "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –º–æ–∂–µ—Ç —Ö–æ—Ä–æ—à–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É, –µ–º—É –ª—É—á—à–µ –µ–µ –≤–æ–æ–±—â–µ –Ω–µ –¥–µ–ª–∞—Ç—å",
    subscale: 'perfectionism'
  },
  {
    id: 5,
    text: "–ï—Å–ª–∏ —è –ø–æ–ø—Ä–æ—à—É –æ –ø–æ–º–æ—â–∏, —ç—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –º–æ—é —Å–ª–∞–±–æ—Å—Ç—å",
    subscale: 'autonomy'
  },
  {
    id: 6,
    text: "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–Ω–µ, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è –ø–ª–æ—Ö–æ–π —á–µ–ª–æ–≤–µ–∫",
    subscale: 'approval'
  },
  {
    id: 7,
    text: "–ï—Å–ª–∏ —è –¥–µ–ª–∞—é –æ—à–∏–±–∫—É, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è –Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–µ–Ω",
    subscale: 'perfectionism'
  },
  {
    id: 8,
    text: "–ï—Å–ª–∏ —è –Ω–µ –º–æ–≥—É –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤–æ–æ–±—â–µ",
    subscale: 'perfectionism'
  },
  {
    id: 9,
    text: "–ú–Ω–µ –Ω—É–∂–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, —á—Ç–æ–±—ã –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º",
    subscale: 'approval'
  },
  {
    id: 10,
    text: "–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤–∞–∂–Ω—ã–π –¥–ª—è –º–µ–Ω—è –æ–∂–∏–¥–∞–µ—Ç –æ—Ç –º–µ–Ω—è —á–µ–≥–æ-—Ç–æ, —è –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å",
    subscale: 'approval'
  },
  {
    id: 11,
    text: "–ú–æ–µ —Å—á–∞—Å—Ç—å–µ –∑–∞–≤–∏—Å–∏—Ç –±–æ–ª—å—à–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, —á–µ–º –æ—Ç –º–µ–Ω—è",
    subscale: 'autonomy'
  },
  {
    id: 12,
    text: "–Ø –Ω–µ –º–æ–≥—É –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º, –µ—Å–ª–∏ –º–µ–Ω—è –Ω–µ –ª—é–±—è—Ç —Ç–µ, –∫–æ–º—É —è –Ω–µ–±–µ–∑—Ä–∞–∑–ª–∏—á–µ–Ω",
    subscale: 'approval'
  },
  {
    id: 13,
    text: "–ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ –∑–Ω–∞—é—Ç, –∫–∞–∫–æ–π —è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –æ–Ω–∏ –ø–æ–¥—É–º–∞—é—Ç –æ–±–æ –º–Ω–µ –º–µ–Ω—å—à–µ",
    subscale: 'approval'
  },
  {
    id: 14,
    text: "–ï—Å–ª–∏ —è —Ç–µ—Ä–ø–ª—é –Ω–µ—É–¥–∞—á—É —á–∞—Å—Ç–∏—á–Ω–æ, —ç—Ç–æ —Ç–∞–∫ –∂–µ –ø–ª–æ—Ö–æ, –∫–∞–∫ –±—ã—Ç—å –ø–æ–ª–Ω—ã–º –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–º",
    subscale: 'perfectionism'
  },
  {
    id: 15,
    text: "–ï—Å–ª–∏ —è –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—ã—Å—à–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è —Å–µ–±—è, —è –±—É–¥—É –≤—Ç–æ—Ä–æ—Å–æ—Ä—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º",
    subscale: 'perfectionism'
  },
  {
    id: 16,
    text: "–ï—Å–ª–∏ —è —Å–∏–ª—å–Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å, —è –¥–æ–ª–∂—É —É–º–µ—Ç—å –ø—Ä–µ—É—Å–ø–µ—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–æ –≤—Å–µ–º",
    subscale: 'perfectionism'
  },
  {
    id: 17,
    text: "–î–ª—è –º–µ–Ω—è —É–∂–∞—Å–Ω–æ –±—ã—Ç—å –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –∫–µ–º-—Ç–æ –≤–∞–∂–Ω—ã–º –¥–ª—è –º–µ–Ω—è",
    subscale: 'approval'
  },
  {
    id: 18,
    text: "–ï—Å–ª–∏ —è –Ω–µ –¥–µ–ª–∞—é –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏, –æ–Ω–∏ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç –º–µ–Ω—è",
    subscale: 'approval'
  },
  {
    id: 19,
    text: "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ —è –ª—é–±–ª—é, –Ω–µ –ª—é–±–∏—Ç –º–µ–Ω—è, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è –Ω–µ–¥–æ—Å—Ç–æ–∏–Ω –ª—é–±–≤–∏",
    subscale: 'approval'
  },
  {
    id: 20,
    text: "–°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è –≥–ª—É–ø –∏–ª–∏ –ø–ª–æ—Ö–æ–π —á–µ–ª–æ–≤–µ–∫",
    subscale: 'perfectionism'
  },
  {
    id: 21,
    text: "–ï—Å–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ (–≤ —à–∫–æ–ª–µ) —è –Ω–µ –¥–µ–ª–∞—é –≤—Å–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ, –∫–∞–∫ –¥—Ä—É–≥–∏–µ, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è —Ö—É–∂–µ –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç—å",
    subscale: 'perfectionism'
  },
  {
    id: 22,
    text: "–ï—Å–ª–∏ —è –Ω–µ –º–æ–≥—É –≤—Å–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è, —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —Å–ª–∞–±—ã–º",
    subscale: 'autonomy'
  },
  {
    id: 23,
    text: "–ú–Ω–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –∑–∞—Å–ª—É–∂–∏—Ç—å —Å–∞–º–æ—É–≤–∞–∂–µ–Ω–∏–µ",
    subscale: 'perfectionism'
  },
  {
    id: 24,
    text: "–ï—Å–ª–∏ —è –≤—ã—Ä–∞–∂–∞—é —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞, –ª—é–¥–∏ –ø–æ–¥—É–º–∞—é—Ç, —á—Ç–æ —Å–æ –º–Ω–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫",
    subscale: 'autonomy'
  }
];

const responseOptions = [
  "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω",
  "–°–æ–≥–ª–∞—Å–µ–Ω",
  "–°–ª–µ–≥–∫–∞ —Å–æ–≥–ª–∞—Å–µ–Ω", 
  "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
  "–°–ª–µ–≥–∫–∞ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω",
  "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω",
  "–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
];

export function DysfunctionalAttitudeScale({ onComplete, onBack }: DysfunctionalAttitudeScaleProps) {
  const [currentAttitude, setCurrentAttitude] = useState(0);
  const [responses, setResponses] = useState<number[]>([]);
  const [showResults, setShowResults] = useState(false);

  const handleAnswer = (answerIndex: number) => {
    const newResponses = [...responses];
    newResponses[currentAttitude] = answerIndex + 1; // –û—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 7
    setResponses(newResponses);

    if (currentAttitude < attitudes.length - 1) {
      setCurrentAttitude(currentAttitude + 1);
    } else {
      calculateResults(newResponses);
    }
  };

  const calculateResults = (responses: number[]) => {
    const totalScore = responses.reduce((sum, score) => sum + score, 0);

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ –ø–æ–¥—à–∫–∞–ª–∞–º
    let perfectionalismScore = 0;
    let approvalScore = 0;
    let autonomyScore = 0;

    attitudes.forEach((attitude, index) => {
      switch (attitude.subscale) {
        case 'perfectionism':
          perfectionalismScore += responses[index];
          break;
        case 'approval':
          approvalScore += responses[index];
          break;
        case 'autonomy':
          autonomyScore += responses[index];
          break;
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—è–∂–µ—Å—Ç—å –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
    const avgScore = totalScore / attitudes.length;
    let severity: 'normal' | 'mild' | 'moderate' | 'severe';
    
    if (avgScore <= 2.5) severity = 'normal';
    else if (avgScore <= 4.0) severity = 'mild';
    else if (avgScore <= 5.5) severity = 'moderate';
    else severity = 'severe';

    const recommendations = generateRecommendations(
      totalScore, 
      severity, 
      perfectionalismScore, 
      approvalScore, 
      autonomyScore
    );

    const result: DASResult = {
      testId: 'das',
      responses,
      totalScore,
      severity,
      perfectionalismScore,
      approvalScore,
      autonomyScore,
      completedAt: new Date(),
      recommendations
    };

    setShowResults(true);
    onComplete(result);
  };

  const generateRecommendations = (
    totalScore: number,
    severity: string,
    perfectionism: number,
    approval: number,
    autonomy: number
  ): string[] => {
    const recommendations = [];

    if (severity === 'severe') {
      recommendations.push('üö® –í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
      recommendations.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è');
      recommendations.push('–†–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —É–±–µ–∂–¥–µ–Ω–∏—è–º–∏');
      recommendations.push('–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ');
    } else if (severity === 'moderate') {
      recommendations.push('‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
      recommendations.push('–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
      recommendations.push('–¢–µ—Ö–Ω–∏–∫–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏');
    } else if (severity === 'mild') {
      recommendations.push('–õ–µ–≥–∫–∏–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
      recommendations.push('–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –º—ã—à–ª–µ–Ω–∏–µ–º');
      recommendations.push('–†–∞–∑–≤–∏—Ç–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥–∏–±–∫–æ—Å—Ç–∏');
    } else {
      recommendations.push('‚úÖ –ó–¥–æ—Ä–æ–≤—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
      recommendations.push('–•–æ—Ä–æ—à–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å');
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—à–∫–∞–ª–∞–º
    const perfectionalismAvg = perfectionism / 12; // 12 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º—É
    const approvalAvg = approval / 10; // 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ–¥–æ–±—Ä–µ–Ω–∏—é
    const autonomyAvg = autonomy / 4; // 4 –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∞–≤—Ç–æ–Ω–æ–º–∏–∏

    if (perfectionalismAvg > 5.0) {
      recommendations.push('üìê –í—ã—Å–æ–∫–∏–π –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å');
      recommendations.push('–†–∞–±–æ—Ç–∞ —Å –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏');
      recommendations.push('–ü—Ä–∏–Ω—è—Ç–∏–µ "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–≥–æ" —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    }

    if (approvalAvg > 5.0) {
      recommendations.push('üë• –ß—Ä–µ–∑–º–µ—Ä–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ–¥–æ–±—Ä–µ–Ω–∏–∏');
      recommendations.push('–†–∞–∑–≤–∏—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏');
      recommendations.push('–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö');
    }

    if (autonomyAvg > 5.0) {
      recommendations.push('üîí –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–Ω–æ–º–∏–µ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º');
      recommendations.push('–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      recommendations.push('–†–∞–±–æ—Ç–∞ —Å —á—É–≤—Å—Ç–≤–æ–º –±–µ—Å–ø–æ–º–æ—â–Ω–æ—Å—Ç–∏');
    }

    return recommendations;
  };

  const goBack = () => {
    if (currentAttitude > 0) {
      setCurrentAttitude(currentAttitude - 1);
    } else {
      onBack();
    }
  };

  const progress = ((currentAttitude + 1) / attitudes.length) * 100;
  const currentAttitudeData = attitudes[currentAttitude];

  if (showResults) {
    const totalScore = responses.reduce((sum, score) => sum + score, 0);
    const avgScore = totalScore / attitudes.length;
    
    const perfectionalismScore = attitudes.reduce((sum, attitude, idx) => {
      return attitude.subscale === 'perfectionism' ? sum + responses[idx] : sum;
    }, 0);
    
    const approvalScore = attitudes.reduce((sum, attitude, idx) => {
      return attitude.subscale === 'approval' ? sum + responses[idx] : sum;
    }, 0);
    
    const autonomyScore = attitudes.reduce((sum, attitude, idx) => {
      return attitude.subscale === 'autonomy' ? sum + responses[idx] : sum;
    }, 0);

    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-3">
              <Brain className="h-6 w-6 text-purple-600" />
              <span>–®–∫–∞–ª–∞ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-purple-50 rounded-lg p-4 text-center">
                <h3 className="font-semibold text-purple-900 mb-2">–û–±—â–∏–π –±–∞–ª–ª</h3>
                <div className="text-3xl font-bold text-purple-700">{totalScore}</div>
                <div className="text-sm text-purple-600 mt-1">
                  –°—Ä–µ–¥–Ω–∏–π: {avgScore.toFixed(1)} –∏–∑ 7
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex justify-between items-center p-2 bg-blue-50 rounded">
                  <span className="text-sm font-medium text-blue-900">–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º</span>
                  <span className="text-blue-700 font-bold">{perfectionalismScore}</span>
                </div>
                <div className="flex justify-between items-center p-2 bg-green-50 rounded">
                  <span className="text-sm font-medium text-green-900">–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ–¥–æ–±—Ä–µ–Ω–∏–∏</span>
                  <span className="text-green-700 font-bold">{approvalScore}</span>
                </div>
                <div className="flex justify-between items-center p-2 bg-orange-50 rounded">
                  <span className="text-sm font-medium text-orange-900">–ê–≤—Ç–æ–Ω–æ–º–∏—è</span>
                  <span className="text-orange-700 font-bold">{autonomyScore}</span>
                </div>
              </div>
            </div>

            <div className="bg-yellow-50 rounded-lg p-4">
              <h3 className="font-semibold text-yellow-900 mb-2">
                <AlertCircle className="h-5 w-5 inline mr-2" />
                –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              </h3>
              <div className="text-sm text-yellow-800 space-y-2">
                <p><strong>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 1-2.5:</strong> –ó–¥–æ—Ä–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</p>
                <p><strong>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 2.6-4.0:</strong> –õ–µ–≥–∫–∏–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</p>
                <p><strong>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 4.1-5.5:</strong> –£–º–µ—Ä–µ–Ω–Ω—ã–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</p>
                <p><strong>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 5.6-7.0:</strong> –í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</p>
              </div>
            </div>

            <div className="bg-red-50 rounded-lg p-4">
              <h3 className="font-semibold text-red-900 mb-2">–í–∞–∂–Ω–æ!</h3>
              <p className="text-sm text-red-800">
                –î–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–≤–ª—è—é—Ç—Å—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫ –¥–µ–ø—Ä–µ—Å—Å–∏–∏. 
                –í—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –º—ã—à–ª–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤.
              </p>
            </div>

            <div className="text-center space-y-4">
              <Button onClick={onBack} className="bg-blue-600 hover:bg-blue-700 text-white">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center space-x-3">
              <Brain className="h-6 w-6 text-purple-600" />
              <span>–®–∫–∞–ª–∞ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫</span>
            </CardTitle>
            <div className="text-sm text-gray-500">
              {currentAttitude + 1} –∏–∑ {attitudes.length}
            </div>
          </div>
          <Progress value={progress} className="h-2 mt-4" />
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="text-sm text-gray-600 bg-purple-50 p-3 rounded-lg">
            <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong> –û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –∫–∞–∂–¥—ã–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. 
            –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –∏—Å—Ç–∏–Ω–Ω—ã—Ö —É–±–µ–∂–¥–µ–Ω–∏—è—Ö.
          </div>

          <div>
            <h3 className="text-lg font-medium mb-6 text-gray-900">
              {currentAttitudeData.text}
            </h3>

            <div className="space-y-2">
              {responseOptions.map((option, index) => (
                <Button
                  key={index}
                  variant="outline"
                  className="w-full p-3 h-auto text-left justify-start hover:bg-purple-50 hover:border-purple-300 transition-colors"
                  onClick={() => handleAnswer(index)}
                >
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 rounded-full border-2 border-purple-300 flex items-center justify-center">
                      <span className="text-sm font-medium text-purple-600">{index + 1}</span>
                    </div>
                    <span>{option}</span>
                  </div>
                </Button>
              ))}
            </div>
          </div>

          <div className="flex justify-between">
            <Button variant="outline" onClick={goBack}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <div className="text-xs text-gray-500 text-center">
              –ü–æ–¥—à–∫–∞–ª–∞: {currentAttitudeData.subscale === 'perfectionism' ? '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º' :
                        currentAttitudeData.subscale === 'approval' ? '–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ–¥–æ–±—Ä–µ–Ω–∏–∏' :
                        '–ê–≤—Ç–æ–Ω–æ–º–∏—è'}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}