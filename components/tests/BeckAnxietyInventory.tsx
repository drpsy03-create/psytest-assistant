import { useState } from 'react';
import { Button } from '../ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Progress } from '../ui/progress';
import { ArrowLeft, Zap, Heart, Thermometer } from 'lucide-react';

interface BeckAnxietyInventoryProps {
  onComplete: (result: BAIResult) => void;
  onBack: () => void;
}

export interface BAIResult {
  testId: 'bai';
  responses: number[];
  totalScore: number;
  severity: 'normal' | 'mild' | 'moderate' | 'severe';
  somaticScore: number;
  cognitiveScore: number;
  completedAt: Date;
  recommendations: string[];
}

const symptoms = [
  {
    id: 1,
    text: "–û–Ω–µ–º–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∫–∞–ª—ã–≤–∞–Ω–∏–µ",
    type: 'somatic'
  },
  {
    id: 2,
    text: "–û—â—É—â–µ–Ω–∏–µ –∂–∞—Ä–∞",
    type: 'somatic'
  },
  {
    id: 3,
    text: "–î—Ä–æ–∂—å –≤ –Ω–æ–≥–∞—Ö",
    type: 'somatic'
  },
  {
    id: 4,
    text: "–ù–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è",
    type: 'cognitive'
  },
  {
    id: 5,
    text: "–°—Ç—Ä–∞—Ö, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
    type: 'cognitive'
  },
  {
    id: 6,
    text: "–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–ª–∏ –ª–µ–≥–∫–æ—Å—Ç—å –≤ –≥–æ–ª–æ–≤–µ",
    type: 'somatic'
  },
  {
    id: 7,
    text: "–£—á–∞—â–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ",
    type: 'somatic'
  },
  {
    id: 8,
    text: "–ù–µ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
    type: 'somatic'
  },
  {
    id: 9,
    text: "–ò—Å–ø—É–≥",
    type: 'cognitive'
  },
  {
    id: 10,
    text: "–ù–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç—å",
    type: 'cognitive'
  },
  {
    id: 11,
    text: "–û—â—É—â–µ–Ω–∏–µ —É–¥—É—à—å—è",
    type: 'somatic'
  },
  {
    id: 12,
    text: "–î—Ä–æ–∂—å –≤ —Ä—É–∫–∞—Ö",
    type: 'somatic'
  },
  {
    id: 13,
    text: "–î—Ä–æ–∂—å",
    type: 'somatic'
  },
  {
    id: 14,
    text: "–°—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å",
    type: 'cognitive'
  },
  {
    id: 15,
    text: "–ó–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ",
    type: 'somatic'
  },
  {
    id: 16,
    text: "–°—Ç—Ä–∞—Ö —Å–º–µ—Ä—Ç–∏",
    type: 'cognitive'
  },
  {
    id: 17,
    text: "–ù–∞–ø—É–≥–∞–Ω–Ω–æ—Å—Ç—å",
    type: 'cognitive'
  },
  {
    id: 18,
    text: "–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è",
    type: 'somatic'
  },
  {
    id: 19,
    text: "–°–ª–∞–±–æ—Å—Ç—å",
    type: 'somatic'
  },
  {
    id: 20,
    text: "–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –ª–∏—Ü–∞",
    type: 'somatic'
  },
  {
    id: 21,
    text: "–ü–æ—Ç–ª–∏–≤–æ—Å—Ç—å (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∂–∞—Ä–æ–π)",
    type: 'somatic'
  }
];

const severityOptions = [
  "–°–æ–≤—Å–µ–º –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–ª–æ",
  "–°–ª–µ–≥–∫–∞ - –Ω–µ –æ—á–µ–Ω—å –±–µ—Å–ø–æ–∫–æ–∏–ª–æ",
  "–£–º–µ—Ä–µ–Ω–Ω–æ - –±—ã–ª–æ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–æ —Ç–µ—Ä–ø–∏–º–æ", 
  "–°–∏–ª—å–Ω–æ - —è –µ–¥–≤–∞ –º–æ–≥ —ç—Ç–æ –≤—ã–Ω–µ—Å—Ç–∏"
];

export function BeckAnxietyInventory({ onComplete, onBack }: BeckAnxietyInventoryProps) {
  const [currentSymptom, setCurrentSymptom] = useState(0);
  const [responses, setResponses] = useState<number[]>([]);
  const [showResults, setShowResults] = useState(false);

  const handleAnswer = (answerIndex: number) => {
    const newResponses = [...responses];
    newResponses[currentSymptom] = answerIndex;
    setResponses(newResponses);

    if (currentSymptom < symptoms.length - 1) {
      setCurrentSymptom(currentSymptom + 1);
    } else {
      calculateResults(newResponses);
    }
  };

  const calculateResults = (responses: number[]) => {
    const totalScore = responses.reduce((sum, score) => sum + score, 0);

    // –ü–æ–¥—Å—á–µ—Ç —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
    let somaticScore = 0;
    let cognitiveScore = 0;

    symptoms.forEach((symptom, index) => {
      if (symptom.type === 'somatic') {
        somaticScore += responses[index];
      } else {
        cognitiveScore += responses[index];
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—è–∂–µ—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏
    let severity: 'normal' | 'mild' | 'moderate' | 'severe';
    if (totalScore <= 7) severity = 'normal';
    else if (totalScore <= 15) severity = 'mild';
    else if (totalScore <= 25) severity = 'moderate';
    else severity = 'severe';

    const recommendations = generateRecommendations(totalScore, severity, somaticScore, cognitiveScore);

    const result: BAIResult = {
      testId: 'bai',
      responses,
      totalScore,
      severity,
      somaticScore,
      cognitiveScore,
      completedAt: new Date(),
      recommendations
    };

    setShowResults(true);
    onComplete(result);
  };

  const generateRecommendations = (
    totalScore: number, 
    severity: string, 
    somaticScore: number, 
    cognitiveScore: number
  ): string[] => {
    const recommendations = [];

    if (severity === 'severe') {
      recommendations.push('üö® –¢—è–∂–µ–ª–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ');
      recommendations.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞—Ä–º–∞–∫–æ—Ç–µ—Ä–∞–ø–∏—é –∞–Ω–∫—Å–∏–æ–ª–∏—Ç–∏–∫–∞–º–∏');
      recommendations.push('–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è (–ö–ü–¢)');
    } else if (severity === 'moderate') {
      recommendations.push('‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –ª–µ—á–µ–Ω–∏—è');
      recommendations.push('–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è');
      recommendations.push('–¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è');
      recommendations.push('–í–æ–∑–º–æ–∂–Ω–∞ —Ñ–∞—Ä–º–∞–∫–æ—Ç–µ—Ä–∞–ø–∏—è');
    } else if (severity === 'mild') {
      recommendations.push('–õ–µ–≥–∫–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å');
      recommendations.push('–¢–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º');
      recommendations.push('–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è');
      recommendations.push('–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } else {
      recommendations.push('‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏');
      recommendations.push('–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
      recommendations.push('–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏');
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤
    if (somaticScore > cognitiveScore) {
      recommendations.push('üí™ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç—Ä–µ–≤–æ–≥–∏');
      recommendations.push('–§–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞—Ö —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–µ–ª–æ–º');
      recommendations.push('–ò—Å–∫–ª—é—á–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Å–∏–º–ø—Ç–æ–º–æ–≤');
    } else {
      recommendations.push('üß† –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç—Ä–µ–≤–æ–≥–∏');
      recommendations.push('–†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —É–±–µ–∂–¥–µ–Ω–∏—è–º–∏');
      recommendations.push('–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã
    const panicSymptoms = [6, 7, 11, 15]; // –ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ, —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, —É–¥—É—à—å–µ, –¥—ã—Ö–∞–Ω–∏–µ
    const panicScore = panicSymptoms.reduce((sum, idx) => sum + responses[idx], 0);
    
    if (panicScore > 8) {
      recommendations.push('‚ö° –í—ã—Å–æ–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤');
      recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
    }

    return recommendations;
  };

  const goBack = () => {
    if (currentSymptom > 0) {
      setCurrentSymptom(currentSymptom - 1);
    } else {
      onBack();
    }
  };

  const progress = ((currentSymptom + 1) / symptoms.length) * 100;
  const currentSymptomData = symptoms[currentSymptom];
  const SymptomIcon = currentSymptomData.type === 'somatic' ? Heart : Zap;

  if (showResults) {
    const totalScore = responses.reduce((sum, score) => sum + score, 0);
    const somaticScore = symptoms.reduce((sum, symptom, idx) => {
      return symptom.type === 'somatic' ? sum + responses[idx] : sum;
    }, 0);
    const cognitiveScore = symptoms.reduce((sum, symptom, idx) => {
      return symptom.type === 'cognitive' ? sum + responses[idx] : sum;
    }, 0);

    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-3">
              <Zap className="h-6 w-6 text-orange-600" />
              <span>–û–ø—Ä–æ—Å–Ω–∏–∫ —Ç—Ä–µ–≤–æ–≥–∏ –ë–µ–∫–∞ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid md:grid-cols-3 gap-6">
              <div className="bg-blue-50 rounded-lg p-4 text-center">
                <h3 className="font-semibold text-blue-900 mb-2">–û–±—â–∏–π –±–∞–ª–ª</h3>
                <div className="text-3xl font-bold text-blue-700">{totalScore}</div>
                <div className="text-sm text-blue-600 mt-1">
                  {totalScore <= 7 ? '–ù–æ—Ä–º–∞' :
                   totalScore <= 15 ? '–õ–µ–≥–∫–∞—è —Ç—Ä–µ–≤–æ–≥–∞' :
                   totalScore <= 25 ? '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞' : '–¢—è–∂–µ–ª–∞—è —Ç—Ä–µ–≤–æ–≥–∞'}
                </div>
              </div>

              <div className="bg-red-50 rounded-lg p-4 text-center">
                <h3 className="font-semibold text-red-900 mb-2">–°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ</h3>
                <div className="text-3xl font-bold text-red-700">{somaticScore}</div>
                <div className="text-sm text-red-600 mt-1">–¢–µ–ª–µ—Å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã</div>
              </div>

              <div className="bg-purple-50 rounded-lg p-4 text-center">
                <h3 className="font-semibold text-purple-900 mb-2">–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ</h3>
                <div className="text-3xl font-bold text-purple-700">{cognitiveScore}</div>
                <div className="text-sm text-purple-600 mt-1">–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã</div>
              </div>
            </div>

            <div className="bg-orange-50 rounded-lg p-4">
              <h3 className="font-semibold text-orange-900 mb-2">–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h3>
              <div className="text-sm text-orange-800 space-y-1">
                <p><strong>0-7 –±–∞–ª–ª–æ–≤:</strong> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å</p>
                <p><strong>8-15 –±–∞–ª–ª–æ–≤:</strong> –õ–µ–≥–∫–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å</p>
                <p><strong>16-25 –±–∞–ª–ª–æ–≤:</strong> –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å</p>
                <p><strong>26-63 –±–∞–ª–ª–∞:</strong> –¢—è–∂–µ–ª–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å</p>
              </div>
            </div>

            <div className="text-center space-y-4">
              <p className="text-gray-600">
                BAI —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö —Ç—Ä–µ–≤–æ–≥–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º 
                –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫ –∏ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.
              </p>
              <Button onClick={onBack} className="bg-blue-600 hover:bg-blue-700 text-white">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center space-x-3">
              <Zap className="h-6 w-6 text-orange-600" />
              <span>–û–ø—Ä–æ—Å–Ω–∏–∫ —Ç—Ä–µ–≤–æ–≥–∏ –ë–µ–∫–∞</span>
            </CardTitle>
            <div className="text-sm text-gray-500">
              {currentSymptom + 1} –∏–∑ {symptoms.length}
            </div>
          </div>
          <Progress value={progress} className="h-2 mt-4" />
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="flex items-center space-x-3 text-sm text-gray-600 bg-orange-50 p-3 rounded-lg">
            <SymptomIcon className="h-5 w-5 text-orange-600" />
            <span>
              <strong>–¢–∏–ø —Å–∏–º–ø—Ç–æ–º–∞:</strong> {currentSymptomData.type === 'somatic' ? '–°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (—Ç–µ–ª–µ—Å–Ω—ã–π)' : '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π (–ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–π)'}
            </span>
          </div>

          <div>
            <h3 className="text-lg font-medium mb-6 text-gray-900">
              –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏–ª–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é, –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è:
            </h3>
            <h2 className="text-xl font-semibold mb-6 text-blue-900">
              {currentSymptomData.text}
            </h2>

            <div className="space-y-3">
              {severityOptions.map((option, index) => (
                <Button
                  key={index}
                  variant="outline"
                  className="w-full p-4 h-auto text-left justify-start hover:bg-orange-50 hover:border-orange-300 transition-colors"
                  onClick={() => handleAnswer(index)}
                >
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 rounded-full border-2 border-orange-300 flex items-center justify-center">
                      <span className="text-sm font-medium text-orange-600">{index}</span>
                    </div>
                    <span>{option}</span>
                  </div>
                </Button>
              ))}
            </div>
          </div>

          <div className="flex justify-between">
            <Button variant="outline" onClick={goBack}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <div className="text-xs text-gray-500 text-center">
              –û—Ü–µ–Ω–∫–∞ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–≤–æ–≥–∏
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}