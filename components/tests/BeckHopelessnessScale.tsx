import { useState } from 'react';
import { Button } from '../ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Progress } from '../ui/progress';
import { ArrowLeft, CloudRain, Sun } from 'lucide-react';

interface BeckHopelessnessScaleProps {
  onComplete: (result: BHSResult) => void;
  onBack: () => void;
}

export interface BHSResult {
  testId: 'bhs';
  responses: boolean[];
  totalScore: number;
  severity: 'normal' | 'mild' | 'moderate' | 'severe';
  completedAt: Date;
  recommendations: string[];
}

const statements = [
  {
    id: 1,
    text: "–Ø —Å–º–æ—Ç—Ä—é –≤ –±—É–¥—É—â–µ–µ —Å –Ω–∞–¥–µ–∂–¥–æ–π –∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º",
    reversed: true
  },
  {
    id: 2,
    text: "–Ø –º–æ–≥ –±—ã —Ç–∞–∫–∂–µ —Å–¥–∞—Ç—å—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥—É –∏–∑–º–µ–Ω–∏—Ç—å –∫ –ª—É—á—à–µ–º—É",
    reversed: false
  },
  {
    id: 3,
    text: "–ö–æ–≥–¥–∞ –¥–µ–ª–∞ –∏–¥—É—Ç –ø–ª–æ—Ö–æ, –º–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç –∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–ª–æ—Ö–∏–º–∏ –≤–µ—á–Ω–æ",
    reversed: true
  },
  {
    id: 4,
    text: "–Ø –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, –∫–∞–∫–æ–π –±—É–¥–µ—Ç –º–æ—è –∂–∏–∑–Ω—å —á–µ—Ä–µ–∑ 10 –ª–µ—Ç",
    reversed: false
  },
  {
    id: 5,
    text: "–£ –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ —è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å",
    reversed: true
  },
  {
    id: 6,
    text: "–í –±—É–¥—É—â–µ–º —è –Ω–∞–¥–µ—é—Å—å –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –≤ —Ç–æ–º, —á—Ç–æ –º–µ–Ω—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–æ–ª–Ω—É–µ—Ç",
    reversed: true
  },
  {
    id: 7,
    text: "–ú–æ–µ –±—É–¥—É—â–µ–µ –∫–∞–∂–µ—Ç—Å—è –º–Ω–µ —Ç–µ–º–Ω—ã–º",
    reversed: false
  },
  {
    id: 8,
    text: "–Ø –Ω–∞–¥–µ—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ö–æ—Ä–æ—à–µ–≥–æ –≤ –∂–∏–∑–Ω–∏, —á–µ–º –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫",
    reversed: true
  },
  {
    id: 9,
    text: "–Ø –ø—Ä–æ—Å—Ç–æ –Ω–µ –º–æ–≥—É –ø–æ–π–º–∞—Ç—å —É–¥–∞—á—É, –∏ –Ω–µ—Ç –ø—Ä–∏—á–∏–Ω –≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±—É–¥—É –≤ –±—É–¥—É—â–µ–º",
    reversed: false
  },
  {
    id: 10,
    text: "–ú–æ–∏ –ø—Ä–æ—à–ª—ã–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –º–µ–Ω—è —Ö–æ—Ä–æ—à–æ –∫ –±—É–¥—É—â–µ–º—É",
    reversed: true
  },
  {
    id: 11,
    text: "–í—Å–µ, —á—Ç–æ —è –≤–∏–∂—É –≤–ø–µ—Ä–µ–¥–∏, –±–æ–ª—å—à–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ, —á–µ–º –ø—Ä–∏—è—Ç–Ω–æ",
    reversed: false
  },
  {
    id: 12,
    text: "–Ø –Ω–µ –Ω–∞–¥–µ—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ, —á—Ç–æ —è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á—É",
    reversed: false
  },
  {
    id: 13,
    text: "–ö–æ–≥–¥–∞ —è —Å–º–æ—Ç—Ä—é –≤ –±—É–¥—É—â–µ–µ, —è –Ω–∞–¥–µ—é—Å—å –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ, —á–µ–º —Å–µ–π—á–∞—Å",
    reversed: true
  },
  {
    id: 14,
    text: "–í—Å–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫, –∫–∞–∫ —è —Ö–æ—á—É",
    reversed: false
  },
  {
    id: 15,
    text: "–£ –º–µ–Ω—è –±–æ–ª—å—à–∞—è –≤–µ—Ä–∞ –≤ –±—É–¥—É—â–µ–µ",
    reversed: true
  },
  {
    id: 16,
    text: "–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞—é —Ç–æ, —á—Ç–æ —Ö–æ—á—É, –ø–æ—ç—Ç–æ–º—É –≥–ª—É–ø–æ —á—Ç–æ-—Ç–æ –∂–µ–ª–∞—Ç—å",
    reversed: false
  },
  {
    id: 17,
    text: "–û—á–µ–Ω—å –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ —è –ø–æ–ª—É—á—É —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º",
    reversed: false
  },
  {
    id: 18,
    text: "–ë—É–¥—É—â–µ–µ –∫–∞–∂–µ—Ç—Å—è –º–Ω–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–º",
    reversed: false
  },
  {
    id: 19,
    text: "–Ø –º–æ–≥—É –æ–∂–∏–¥–∞—Ç—å –±–æ–ª—å—à–µ —Ö–æ—Ä–æ—à–∏—Ö –≤—Ä–µ–º–µ–Ω, —á–µ–º –ø–ª–æ—Ö–∏—Ö",
    reversed: true
  },
  {
    id: 20,
    text: "–ù–µ—Ç —Å–º—ã—Å–ª–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ —è —Ö–æ—á—É, –ø–æ—Ç–æ–º—É —á—Ç–æ —è, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –ø–æ–ª—É—á—É —ç—Ç–æ–≥–æ",
    reversed: false
  }
];

export function BeckHopelessnessScale({ onComplete, onBack }: BeckHopelessnessScaleProps) {
  const [currentStatement, setCurrentStatement] = useState(0);
  const [responses, setResponses] = useState<boolean[]>([]);
  const [showResults, setShowResults] = useState(false);

  const handleAnswer = (agrees: boolean) => {
    const newResponses = [...responses];
    newResponses[currentStatement] = agrees;
    setResponses(newResponses);

    if (currentStatement < statements.length - 1) {
      setCurrentStatement(currentStatement + 1);
    } else {
      calculateResults(newResponses);
    }
  };

  const calculateResults = (responses: boolean[]) => {
    let score = 0;

    statements.forEach((statement, index) => {
      const userAgrees = responses[index];
      
      // –ï—Å–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–µ (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ), —Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ = 0 –±–∞–ª–ª–æ–≤, –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ = 1 –±–∞–ª–ª
      // –ï—Å–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä—è–º–æ–µ (–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ), —Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ = 1 –±–∞–ª–ª, –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ = 0 –±–∞–ª–ª–æ–≤
      if (statement.reversed) {
        score += userAgrees ? 0 : 1;
      } else {
        score += userAgrees ? 1 : 0;
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—è–∂–µ—Å—Ç—å –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    let severity: 'normal' | 'mild' | 'moderate' | 'severe';
    if (score <= 3) severity = 'normal';
    else if (score <= 8) severity = 'mild';
    else if (score <= 13) severity = 'moderate';
    else severity = 'severe';

    const recommendations = generateRecommendations(score, severity);

    const result: BHSResult = {
      testId: 'bhs',
      responses,
      totalScore: score,
      severity,
      completedAt: new Date(),
      recommendations
    };

    setShowResults(true);
    onComplete(result);
  };

  const generateRecommendations = (score: number, severity: string): string[] => {
    const recommendations = [];

    if (severity === 'severe') {
      recommendations.push('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ - –≤—ã—Å–æ–∫–∏–π —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫');
      recommendations.push('–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –∞–º–±—É–ª–∞—Ç–æ—Ä–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ');
      recommendations.push('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞');
    } else if (severity === 'moderate') {
      recommendations.push('‚ö†Ô∏è –í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
      recommendations.push('–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —É–±–µ–∂–¥–µ–Ω–∏—è–º–∏');
      recommendations.push('–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞');
      recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞');
    } else if (severity === 'mild') {
      recommendations.push('–õ–µ–≥–∫–∞—è —Å—Ç–µ–ø–µ–Ω—å –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏');
      recommendations.push('–†–∞–±–æ—Ç–∞ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±—É–¥—É—â–µ–≥–æ');
      recommendations.push('–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
      recommendations.push('–¢–µ—Ö–Ω–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–¥–µ–∂–¥—ã –∏ —Ü–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏—è');
    } else {
      recommendations.push('‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–¥–µ–∂–¥—ã –Ω–∞ –±—É–¥—É—â–µ–µ');
      recommendations.push('–•–æ—Ä–æ—à–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã');
      recommendations.push('–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–≥–ª—è–¥–∞ –Ω–∞ –±—É–¥—É—â–µ–µ');
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    const negativeStatements = responses.filter((response, idx) => 
      !statements[idx].reversed && response
    ).length;

    if (negativeStatements > 10) {
      recommendations.push('–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —É–±–µ–∂–¥–µ–Ω–∏—è –æ –±—É–¥—É—â–µ–º');
      recommendations.push('–§–æ–∫—É—Å –Ω–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏');
    }

    return recommendations;
  };

  const goBack = () => {
    if (currentStatement > 0) {
      setCurrentStatement(currentStatement - 1);
    } else {
      onBack();
    }
  };

  const progress = ((currentStatement + 1) / statements.length) * 100;
  const currentStatementData = statements[currentStatement];

  if (showResults) {
    const score = responses.reduce((sum, response, idx) => {
      const statement = statements[idx];
      if (statement.reversed) {
        return sum + (response ? 0 : 1);
      } else {
        return sum + (response ? 1 : 0);
      }
    }, 0);

    const getSeverityColor = (severity: string) => {
      switch (severity) {
        case 'severe': return 'text-red-700 bg-red-50';
        case 'moderate': return 'text-orange-700 bg-orange-50';
        case 'mild': return 'text-yellow-700 bg-yellow-50';
        default: return 'text-green-700 bg-green-50';
      }
    };

    const getSeverityText = (severity: string) => {
      switch (severity) {
        case 'severe': return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å';
        case 'moderate': return '–í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å';
        case 'mild': return '–õ–µ–≥–∫–∞—è –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å';
        default: return '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–¥–µ–∂–¥–∞';
      }
    };

    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-3">
              <CloudRain className="h-6 w-6 text-gray-600" />
              <span>–®–∫–∞–ª–∞ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ë–µ–∫–∞ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="text-center">
              <div className="text-4xl font-bold text-gray-900 mb-2">{score} –±–∞–ª–ª–æ–≤</div>
              <div className={`inline-block px-4 py-2 rounded-lg ${getSeverityColor(responses.reduce((sum, response, idx) => {
                const statement = statements[idx];
                if (statement.reversed) {
                  return sum + (response ? 0 : 1);
                } else {
                  return sum + (response ? 1 : 0);
                }
              }, 0) <= 3 ? 'normal' : responses.reduce((sum, response, idx) => {
                const statement = statements[idx];
                if (statement.reversed) {
                  return sum + (response ? 0 : 1);
                } else {
                  return sum + (response ? 1 : 0);
                }
              }, 0) <= 8 ? 'mild' : responses.reduce((sum, response, idx) => {
                const statement = statements[idx];
                if (statement.reversed) {
                  return sum + (response ? 0 : 1);
                } else {
                  return sum + (response ? 1 : 0);
                }
              }, 0) <= 13 ? 'moderate' : 'severe')}`}>
                {getSeverityText(score <= 3 ? 'normal' : score <= 8 ? 'mild' : score <= 13 ? 'moderate' : 'severe')}
              </div>
            </div>

            <div className="bg-blue-50 rounded-lg p-4">
              <h3 className="font-semibold text-blue-900 mb-2">–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h3>
              <div className="text-sm text-blue-800 space-y-1">
                <p><strong>0-3 –±–∞–ª–ª–∞:</strong> –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–¥–µ–∂–¥—ã</p>
                <p><strong>4-8 –±–∞–ª–ª–æ–≤:</strong> –õ–µ–≥–∫–∞—è –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å</p>
                <p><strong>9-13 –±–∞–ª–ª–æ–≤:</strong> –£–º–µ—Ä–µ–Ω–Ω–∞—è –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å</p>
                <p><strong>14-20 –±–∞–ª–ª–æ–≤:</strong> –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∏–π —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫)</p>
              </div>
            </div>

            <div className="bg-yellow-50 rounded-lg p-4">
              <h3 className="font-semibold text-yellow-900 mb-2">–í–∞–∂–Ω–æ!</h3>
              <p className="text-sm text-yellow-800">
                –®–∫–∞–ª–∞ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ë–µ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–æ–≤ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞. 
                –í—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.
              </p>
            </div>

            <div className="text-center space-y-4">
              <Button onClick={onBack} className="bg-blue-600 hover:bg-blue-700 text-white">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center space-x-3">
              <CloudRain className="h-6 w-6 text-gray-600" />
              <span>–®–∫–∞–ª–∞ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ë–µ–∫–∞</span>
            </CardTitle>
            <div className="text-sm text-gray-500">
              {currentStatement + 1} –∏–∑ {statements.length}
            </div>
          </div>
          <Progress value={progress} className="h-2 mt-4" />
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg">
            <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong> –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ä–µ—à–∏—Ç–µ, —Å–æ–≥–ª–∞—Å–Ω—ã –≤—ã —Å –Ω–∏–º –∏–ª–∏ –Ω–µ—Ç, 
            —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –±—É–¥—É—â–µ–º—É –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
          </div>

          <div>
            <h3 className="text-lg font-medium mb-6 text-gray-900">
              {currentStatementData.text}
            </h3>

            <div className="space-y-3">
              <Button
                variant="outline"
                className="w-full p-4 h-auto text-left justify-start hover:bg-green-50 hover:border-green-300 transition-colors"
                onClick={() => handleAnswer(true)}
              >
                <div className="flex items-center space-x-3">
                  <Sun className="h-5 w-5 text-green-600" />
                  <span>–°–æ–≥–ª–∞—Å–µ–Ω</span>
                </div>
              </Button>

              <Button
                variant="outline"
                className="w-full p-4 h-auto text-left justify-start hover:bg-red-50 hover:border-red-300 transition-colors"
                onClick={() => handleAnswer(false)}
              >
                <div className="flex items-center space-x-3">
                  <CloudRain className="h-5 w-5 text-gray-600" />
                  <span>–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω</span>
                </div>
              </Button>
            </div>
          </div>

          <div className="flex justify-between">
            <Button variant="outline" onClick={goBack}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <div className="text-xs text-gray-500 text-center">
              –ö–ª—é—á–µ–≤–æ–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}