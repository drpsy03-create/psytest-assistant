import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Input } from './ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';
import { AlertCircle, TrendingUp, TrendingDown, Minus, ArrowLeft, MessageSquare, Phone, Bell, Plus, Copy, Key, Users, Clock, Shield, QrCode, Download } from 'lucide-react';
import { toast } from 'sonner@2.0.3';
import { EmailConfigStatus } from './EmailConfigStatus';

interface TestResult {
  id: string;
  patientName: string;
  testType: string;
  score: number;
  severity: 'mild' | 'moderate' | 'severe' | 'normal';
  date: string;
  aiAnalysis: string;
  recommendations: string[];
}

interface AccessCode {
  id: string;
  code: string;
  patientName: string;
  createdDate: string;
  expiryDate: string;
  isActive: boolean;
  usedDate?: string;
  testResults?: number;
}

interface DoctorDashboardProps {
  onBack: () => void;
  user: { role: 'doctor' | 'patient'; name: string; id: string } | null;
  onLogout: () => void;
  testResults: TestResult[];
  accessCodes: AccessCode[];
  setAccessCodes: React.Dispatch<React.SetStateAction<AccessCode[]>>;
}

export function DoctorDashboard({ onBack, user, onLogout, testResults, accessCodes, setAccessCodes }: DoctorDashboardProps) {
  const [selectedResult, setSelectedResult] = useState<TestResult | null>(null);
  const [newPatientName, setNewPatientName] = useState('');
  const [showCreateCodeDialog, setShowCreateCodeDialog] = useState(false);
  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const mockTestResults: TestResult[] = [
    {
      id: '1',
      patientName: '–ê–Ω–Ω–∞ –ü.',
      testType: '–®–∫–∞–ª–∞ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –ë–µ–∫–∞ (BDI-II)',
      score: 18,
      severity: 'moderate',
      date: '2024-01-15',
      aiAnalysis: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —É–º–µ—Ä–µ–Ω–Ω—É—é –¥–µ–ø—Ä–µ—Å—Å–∏—é. –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–Ω–∞ –∏ –∞–ø–ø–µ—Ç–∏—Ç–∞. –ü–∞—Ü–∏–µ–Ω—Ç–∫–∞ —Å–æ–æ–±—â–∞–µ—Ç –æ —á—É–≤—Å—Ç–≤–µ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
      recommendations: [
        '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –°–ò–û–ó–°',
        '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫—É—é —Ç–µ—Ä–∞–ø–∏—é',
        '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2-3 –Ω–µ–¥–µ–ª–∏',
        '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞'
      ]
    },
    {
      id: '2',
      patientName: '–ú–∏—Ö–∞–∏–ª –ö.',
      testType: 'GAD-7 (–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å)',
      score: 12,
      severity: 'moderate',
      date: '2024-01-14',
      aiAnalysis: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏. –ü–∞—Ü–∏–µ–Ω—Ç –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞, –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –º—ã—à–µ—á–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.',
      recommendations: [
        '–û–±—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∞–º —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º',
        '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–Ω–∫—Å–∏–æ–ª–∏—Ç–∏–∫–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫—É—Ä—Å–∞',
        '–ü—Å–∏—Ö–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ –ø—Ä–∏—Ä–æ–¥–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏',
        '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è'
      ]
    },
    {
      id: '3',
      patientName: '–ï–ª–µ–Ω–∞ –í.',
      testType: 'MMSE (–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)',
      score: 24,
      severity: 'mild',
      date: '2024-01-13',
      aiAnalysis: '–õ–µ–≥–∫–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è. –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.',
      recommendations: [
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
        '–ú–†–¢ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ø–∞—Ç–æ–ª–æ–≥–∏–∏',
        '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è',
        '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞'
      ]
    },
    {
      id: '4',
      patientName: '–î–º–∏—Ç—Ä–∏–π –°.',
      testType: 'PHQ-9 (–î–µ–ø—Ä–µ—Å—Å–∏—è)',
      score: 8,
      severity: 'mild',
      date: '2024-01-12',
      aiAnalysis: '–õ–µ–≥–∫–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏–º–ø—Ç–æ–º–∞—Ç–∏–∫–∏. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.',
      recommendations: [
        '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
        '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—è—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
        '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Å–Ω–∞ –∏ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è',
        '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏–Ω–∞–º–∏–∫–∏ —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü'
      ]
    }
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const displayTestResults = testResults.length > 0 ? testResults : mockTestResults;

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'severe': return 'bg-red-100 text-red-800';
      case 'moderate': return 'bg-yellow-100 text-yellow-800';
      case 'mild': return 'bg-blue-100 text-blue-800';
      default: return 'bg-green-100 text-green-800';
    }
  };

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case 'severe': return '–¢—è–∂–µ–ª–∞—è';
      case 'moderate': return '–£–º–µ—Ä–µ–Ω–Ω–∞—è';
      case 'mild': return '–õ–µ–≥–∫–∞—è';
      default: return '–ù–æ—Ä–º–∞';
    }
  };

  const sendToMessenger = (platform: 'whatsapp' | 'telegram', result: TestResult) => {
    const message = `–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –æ—Ç ${result.patientName}:\n${result.testType}\n–ë–∞–ª–ª: ${result.score}\n–°—Ç–µ–ø–µ–Ω—å: ${getSeverityText(result.severity)}\n–î–∞—Ç–∞: ${result.date}\n\n–ê–Ω–∞–ª–∏–∑ –ò–ò: ${result.aiAnalysis.substring(0, 100)}...`;
    
    // Mock –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (platform === 'whatsapp') {
      toast.success(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ WhatsApp –¥–ª—è ${result.patientName}`);
    } else {
      toast.success(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è ${result.patientName}`);
    }
  };

  const generateAccessCode = () => {
    const prefixes = ['MED', 'DOC', 'PSY', 'CLI'];
    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const numbers = Math.floor(Math.random() * 10);
    const letters = Math.random().toString(36).substring(2, 5).toUpperCase();
    const suffix = Math.random().toString(36).substring(2, 5).toUpperCase();
    return `${prefix}${numbers}-${letters}${suffix}`;
  };

  const createAccessCode = () => {
    if (!newPatientName.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞');
      return;
    }

    const newCode: AccessCode = {
      id: Date.now().toString(),
      code: generateAccessCode(),
      patientName: newPatientName,
      createdDate: new Date().toISOString().split('T')[0],
      expiryDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 7 –¥–Ω–µ–π
      isActive: true,
      testResults: 0
    };

    setAccessCodes([newCode, ...accessCodes]);
    setNewPatientName('');
    setShowCreateCodeDialog(false);
    
    toast.success(`–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ ${newCode.code} —Å–æ–∑–¥–∞–Ω –¥–ª—è ${newCode.patientName}`);
  };

  const copyToClipboard = (code: string) => {
    navigator.clipboard.writeText(code);
    toast.success('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  const deactivateCode = (codeId: string) => {
    setAccessCodes(accessCodes.map(code => 
      code.id === codeId ? { ...code, isActive: false } : code
    ));
    toast.success('–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  };

  const sendCodeToMessenger = (platform: 'whatsapp' | 'telegram', accessCode: AccessCode) => {
    const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${accessCode.patientName}!

–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:

üîê –ö–æ–¥: ${accessCode.code}

üì± –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞
üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ${accessCode.patientName}
üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: ${accessCode.code}

‚è±Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${accessCode.expiryDate}

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç 5-15 –º–∏–Ω—É—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥—É—Ç –º–Ω–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–í–∞—à –≤—Ä–∞—á`;

    if (platform === 'whatsapp') {
      toast.success(`–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ WhatsApp –¥–ª—è ${accessCode.patientName}`);
    } else {
      toast.success(`–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è ${accessCode.patientName}`);
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ${platform}:`, message);
  };

  const downloadInstructions = (accessCode: AccessCode) => {
    const instructions = `–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ü–ê–¶–ò–ï–ù–¢–ê

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${accessCode.patientName}!

–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: [—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç]
2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ${accessCode.patientName}
3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: ${accessCode.code}
4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ

–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${accessCode.expiryDate}
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç 5-15 –º–∏–Ω—É—Ç
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥—É—Ç –≤–∞—à–µ–º—É –≤—Ä–∞—á—É

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –≤—Ä–∞—á—É.`;

    const blob = new Blob([instructions], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_${accessCode.patientName}_${accessCode.code}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast.success('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center">
            <Button variant="ghost" onClick={onBack} className="mr-4">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <h1 className="text-2xl font-bold text-gray-900">–ü–∞–Ω–µ–ª—å –≤—Ä–∞—á–∞-–ø—Å–∏—Ö–∏–∞—Ç—Ä–∞</h1>
          </div>
          <div className="flex items-center space-x-4">
            {user && (
              <div className="text-sm text-gray-600">
                –í—Ä–∞—á: <span className="font-medium">{user.name}</span>
              </div>
            )}
            <Button variant="outline" size="sm">
              <Bell className="h-4 w-4 mr-2" />
              –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </Button>
            <Button variant="outline" size="sm" onClick={onLogout}>
              –í—ã–π—Ç–∏
            </Button>
          </div>
        </div>

        {/* Email Configuration Status */}
        <div className="mb-6">
          <EmailConfigStatus />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤</p>
                  <p className="text-2xl font-bold text-green-600">
                    {accessCodes.filter(code => code.isActive).length}
                  </p>
                </div>
                <Key className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤</p>
                  <p className="text-2xl font-bold">{displayTestResults.length}</p>
                </div>
                <TrendingUp className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</p>
                  <p className="text-2xl font-bold text-red-600">
                    {displayTestResults.filter(r => r.severity === 'severe').length}
                  </p>
                </div>
                <AlertCircle className="h-8 w-8 text-red-500" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é</p>
                  <p className="text-2xl font-bold">
                    {accessCodes.filter(code => code.usedDate).length}
                  </p>
                </div>
                <Users className="h-8 w-8 text-gray-500" />
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="codes" className="space-y-4">
          <TabsList>
            <TabsTrigger value="codes">–ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞</TabsTrigger>
            <TabsTrigger value="results">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</TabsTrigger>
            <TabsTrigger value="analysis">–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</TabsTrigger>
          </TabsList>
          
          <TabsContent value="codes">
            <div className="space-y-6">
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–æ–≤ */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤</p>
                        <p className="text-2xl font-bold text-green-600">
                          {accessCodes.filter(code => code.isActive).length}
                        </p>
                      </div>
                      <Key className="h-8 w-8 text-green-500" />
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-600">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö</p>
                        <p className="text-2xl font-bold text-blue-600">
                          {accessCodes.filter(code => code.usedDate).length}
                        </p>
                      </div>
                      <Users className="h-8 w-8 text-blue-500" />
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-600">–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è</p>
                        <p className="text-2xl font-bold text-yellow-600">0</p>
                      </div>
                      <Clock className="h-8 w-8 text-yellow-500" />
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-600">–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ</p>
                        <p className="text-2xl font-bold text-gray-600">{accessCodes.length}</p>
                      </div>
                      <Shield className="h-8 w-8 text-gray-500" />
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞</CardTitle>
                    <Dialog open={showCreateCodeDialog} onOpenChange={setShowCreateCodeDialog}>
                      <DialogTrigger asChild>
                        <Button className="bg-blue-600 hover:bg-blue-700">
                          <Plus className="h-4 w-4 mr-2" />
                          –°–æ–∑–¥–∞—Ç—å –∫–æ–¥
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>–°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞</DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4 mt-4">
                          <div>
                            <label className="block text-sm font-medium mb-2">
                              –ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
                            </label>
                            <Input
                              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"
                              value={newPatientName}
                              onChange={(e) => setNewPatientName(e.target.value)}
                              onKeyPress={(e) => e.key === 'Enter' && createAccessCode()}
                            />
                          </div>
                          <div className="bg-blue-50 p-3 rounded-lg">
                            <div className="flex items-start space-x-2">
                              <Shield className="h-4 w-4 text-blue-600 mt-0.5" />
                              <div className="text-sm text-blue-800">
                                <p className="font-medium">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–¥–∞:</p>
                                <ul className="mt-1 space-y-1 text-xs">
                                  <li>‚Ä¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 7 –¥–Ω–µ–π</li>
                                  <li>‚Ä¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</li>
                                  <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤</li>
                                </ul>
                              </div>
                            </div>
                          </div>
                          <div className="flex space-x-2">
                            <Button 
                              onClick={createAccessCode}
                              disabled={!newPatientName.trim()}
                              className="flex-1"
                            >
                              –°–æ–∑–¥–∞—Ç—å –∫–æ–¥
                            </Button>
                            <Button 
                              variant="outline" 
                              onClick={() => setShowCreateCodeDialog(false)}
                            >
                              –û—Ç–º–µ–Ω–∞
                            </Button>
                          </div>
                        </div>
                      </DialogContent>
                    </Dialog>
                  </div>
                </CardHeader>
                <CardContent>
                  {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
                  <div className="mb-6 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-100 rounded-xl p-4">
                    <div className="flex items-start space-x-3">
                      <Shield className="h-5 w-5 text-blue-600 mt-0.5" />
                      <div>
                        <h4 className="font-semibold text-blue-900 mb-2">–ö–∞–∫ –¥–∞—Ç—å –∫–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç—É:</h4>
                        <div className="text-sm text-blue-800 space-y-1">
                          <p>1. <strong>–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–¥</strong> - –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–¥" –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞</p>
                          <p>2. <strong>–ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ–¥</strong> - —Å–æ–æ–±—â–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç—É –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (SMS, WhatsApp, –ª–∏—á–Ω–æ)</p>
                          <p>3. <strong>–î–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</strong> - –ø–∞—Ü–∏–µ–Ω—Ç –∏–¥–µ—Ç –Ω–∞ —Å–∞–π—Ç, –≤–≤–æ–¥–∏—Ç –∏–º—è –∏ –∫–æ–¥</p>
                          <p>4. <strong>–ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</strong> - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞</TableHead>
                        <TableHead>–ü–∞—Ü–∏–µ–Ω—Ç</TableHead>
                        <TableHead>–°–æ–∑–¥–∞–Ω</TableHead>
                        <TableHead>–ò—Å—Ç–µ–∫–∞–µ—Ç</TableHead>
                        <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead>–¢–µ—Å—Ç—ã</TableHead>
                        <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {accessCodes.map((code) => (
                        <TableRow key={code.id}>
                          <TableCell>
                            <div className="flex items-center space-x-2">
                              <code className="bg-gray-100 px-2 py-1 rounded font-mono text-sm">
                                {code.code}
                              </code>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => copyToClipboard(code.code)}
                                className="h-6 w-6 p-0"
                              >
                                <Copy className="h-3 w-3" />
                              </Button>
                            </div>
                          </TableCell>
                          <TableCell className="font-medium">{code.patientName}</TableCell>
                          <TableCell>{code.createdDate}</TableCell>
                          <TableCell>{code.expiryDate}</TableCell>
                          <TableCell>
                            <Badge 
                              className={code.isActive 
                                ? 'bg-green-100 text-green-800' 
                                : 'bg-gray-100 text-gray-800'
                              }
                            >
                              {code.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="text-center">
                              <span className="font-medium">{code.testResults || 0}</span>
                              <div className="text-xs text-gray-500">—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex space-x-2">
                              {code.isActive && (
                                <>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => sendCodeToMessenger('whatsapp', code)}
                                    title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp"
                                  >
                                    <MessageSquare className="h-3 w-3" />
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => sendCodeToMessenger('telegram', code)}
                                    title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"
                                  >
                                    <Phone className="h-3 w-3" />
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => downloadInstructions(code)}
                                    title="–°–∫–∞—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"
                                  >
                                    <Download className="h-3 w-3" />
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => deactivateCode(code.id)}
                                    className="text-red-600 hover:text-red-700"
                                  >
                                    –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                                  </Button>
                                </>
                              )}
                              {code.usedDate && (
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => toast.info(`–ö–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${code.usedDate}`)}
                                >
                                  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="results">
            <Card>
              <CardHeader>
                <CardTitle>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>–ü–∞—Ü–∏–µ–Ω—Ç</TableHead>
                      <TableHead>–¢–µ—Å—Ç</TableHead>
                      <TableHead>–ë–∞–ª–ª</TableHead>
                      <TableHead>–°—Ç–µ–ø–µ–Ω—å</TableHead>
                      <TableHead>–î–∞—Ç–∞</TableHead>
                      <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {displayTestResults.map((result) => (
                      <TableRow key={result.id}>
                        <TableCell className="font-medium">{result.patientName}</TableCell>
                        <TableCell>{result.testType}</TableCell>
                        <TableCell>{result.score}</TableCell>
                        <TableCell>
                          <Badge className={getSeverityColor(result.severity)}>
                            {getSeverityText(result.severity)}
                          </Badge>
                        </TableCell>
                        <TableCell>{result.date}</TableCell>
                        <TableCell>
                          <div className="flex space-x-2">
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => setSelectedResult(result)}
                            >
                              –ê–Ω–∞–ª–∏–∑
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => sendToMessenger('whatsapp', result)}
                            >
                              <MessageSquare className="h-4 w-4" />
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => sendToMessenger('telegram', result)}
                            >
                              <Phone className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="analysis">
            {selectedResult ? (
              <div className="grid gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {selectedResult.patientName}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <h4 className="font-semibold mb-2">–¢–µ—Å—Ç: {selectedResult.testType}</h4>
                        <div className="flex items-center space-x-4">
                          <span>–ë–∞–ª–ª: <strong>{selectedResult.score}</strong></span>
                          <Badge className={getSeverityColor(selectedResult.severity)}>
                            {getSeverityText(selectedResult.severity)}
                          </Badge>
                          <span className="text-sm text-gray-500">–î–∞—Ç–∞: {selectedResult.date}</span>
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="font-semibold mb-2">–ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</h4>
                        <p className="text-gray-700 bg-blue-50 p-4 rounded-lg">{selectedResult.aiAnalysis}</p>
                      </div>
                      
                      <div>
                        <h4 className="font-semibold mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                        <ul className="list-disc list-inside space-y-1">
                          {selectedResult.recommendations.map((rec, index) => (
                            <li key={index} className="text-gray-700">{rec}</li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            ) : (
              <Card>
                <CardContent className="p-8 text-center">
                  <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>
                </CardContent>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}